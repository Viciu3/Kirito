from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import asyncio
import time
import requests

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤
language_settings = {}

texts = {
    'ru': {
        'welcome': "üòÅ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ö–∏—Ä–∏—Ç–æ.\nüöÜ–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π: /gpt.\nüß≠–¢–∞–∫–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞: /ping - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –±–æ—Ç–∞.\n\nüìö–î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–∏–ª–µ–π —É –Ω–∞—Å –µ—Å—Ç—å –≥–∞–π–¥ –±—É–∫ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥.\n‚úèÔ∏è–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É: /help –∏ –≤–∞–º –ø–æ–∫–∞–∂–µ—Ç –≥–∞–π–¥.",
        'help': "üì®–°—Å—ã–ª–∫–∞ –Ω–∞ –≥–∞–π–¥: [–ì–∞–π–¥](https://teletype.in/@shadow_red1/editor/nTys2trZ5Mj)!",
        'command_not_exist': "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
        'lang_set_ru': "‚úÖÔ∏è–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
        'lang_set_en': "‚úÖÔ∏èLanguage set to English.",
        'usage_gpt': "üåü–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /gpt <–≤–∞—à –≤–æ–ø—Ä–æ—Å>",
        'site_link': "üìé –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç: [–°–∞–π—Ç](http://100.101.14.39:8080)!",
    },
    'en': {
        'welcome': "üòÅWelcome to Kirito bot.\nüöÜThis bot can process user questions with the command: /gpt.\nüß≠There's also a command: /ping to check the bot's speed.\n\nüìöFor new users, we have a guide book on how to use the commands.\n‚úèÔ∏èJust type the command: /help and it will show you the guide.",
        'help': "üì®Link to the guide: [Guide](https://teletype.in/@shadow_red1/editor/nTys2trZ5Mj)!",
        'command_not_exist': "Such a command does not exist.",
        'lang_set_ru': "‚úÖÔ∏è–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
        'lang_set_en': "‚úÖÔ∏èLanguage set to English.",
        'usage_gpt': "üåüUsage: /gpt <your question>",
        'site_link': "üìé Here's the link to our site: [Site](http://100.101.14.39:8080)!",
    }
}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = language_settings.get(user_id, 'ru')
    
    welcome_message = texts[lang]['welcome']

    await update.message.reply_text(
        welcome_message,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ruüá∑üá∫", callback_data='lang_ru')],
            [InlineKeyboardButton("Enüá±üá∑", callback_data='lang_en')]
        ])
    )

# –ö–æ–º–∞–Ω–¥–∞ –ü–∏–Ω–≥
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = language_settings.get(user_id, 'ru')

    start_time = time.time()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    await update.message.reply_text(f"‚è≥Ô∏è–ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞..." if lang == 'ru' else f"‚è≥Ô∏èMeasuring response time...")
    end_time = time.time()
    ping_time = (end_time - start_time) * 1000

    await update.message.reply_text(f"üöÄ–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞: {ping_time:.2f} ms" if lang == 'ru' else f"üöÄResponse speed: {ping_time:.2f} ms")

# –ö–æ–º–∞–Ω–¥–∞ .help/help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = language_settings.get(user_id, 'ru')
    await update.message.reply_text(texts[lang]['help'], parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è ChatGPT
async def gpt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = ' '.join(context.args).strip()
    if not question:
        reply = await update.message.get_reply_to_message()
        if reply:
            question = reply.text
        else:
            await update.message.reply_text("–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.")
            return

    prompt = [{"role": "user", "content": question}]
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

    try:
        response = requests.post('http://api.onlysq.ru/ai/v1', json=prompt)
        response_json = response.json()
        answer = response_json.get('answer', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.')
        await update.message.reply_text(f"**–í–æ–ø—Ä–æ—Å:** {question}\n**–û—Ç–≤–µ—Ç:** {answer}")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∞–π—Ç–∞
async def site_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = language_settings.get(user_id, 'ru')
    await update.message.reply_text(texts[lang]['site_link'], parse_mode='Markdown')

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    if query.data == 'lang_ru':
        language_settings[user_id] = 'ru'
        await query.answer(texts['ru']['lang_set_ru'])
    elif query.data == 'lang_en':
        language_settings[user_id] = 'en'
        await query.answer(texts['en']['lang_set_en'])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    await start(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
async def command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    command = update.message.text.strip().lower()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    user_id = update.message.from_user.id

    # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª '/' –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    if command.startswith('/'):
        command = command[1:]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    if command in ("start", "—Å—Ç–∞—Ä—Ç", "s"):
        await start(update, context)
    elif command in ("ping", "–ø–∏–Ω–≥", "p"):
        await ping(update, context)
    elif command in ("help", "–ø–æ–º–æ—â—å", "—Ö–µ–ª–ø", "h"):
        await help_command(update, context)
    elif command in ("gpt", "–≥–ø—Ç", "g"):
        await gpt_command(update, context)
    elif command in ("—Å–∞–π—Ç", "site"):
        await site_command(update, context)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "—Å–∞–π—Ç"
    else:
        lang = language_settings.get(user_id, 'ru')
        await update.message.reply_text(texts[lang]['command_not_exist'])

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token("7230239139:AAED6QitKSDs_K-ihYLQHJYH5C6OFg9LMEE").build()  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ping", ping))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("gpt", gpt_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, command_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button_handler))

    asyncio.get_event_loop().run_until_complete(application.run_polling())

if __name__ == "__main__":
    main()

    #: cd /storage/emulated/0/–û–æ–æ–æ 
    #: python my_botkirito.py
    #: 7230239139:AAED6QitKSDs_K-ihYLQHJYH5C6OFg9LMEE —Ç–æ–∫–µ–Ω
    
